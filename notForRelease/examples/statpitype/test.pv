type key.

fun sign(bitstring, key): bitstring.
reduc forall x:bitstring, k: key; checksign(sign(x, k), k) = x.
reduc forall x:bitstring, k: key; getmsg(sign(x, k)) = x.

channel ch.

free K: key [private].

event e1(bitstring).
event e2(bitstring).

query x:bitstring; inj-event(e2(x)) ==> inj-event(e1(x)).

free zero: bitstring.

cell state : bitstring := zero.

let a = !
    new x:bitstring; 
    event e1(x); 
    out(ch, sign(x, K)).

let b = !
    in(ch, xs:bitstring); 
    let x:bitstring = checksign(xs, K) in 
    event e2(x).

let b_state = !
    lock state; 
    in(ch, xs:bitstring); 
    read state as xstate; 
    if xstate <> xs then 
      let x:bitstring = checksign(xs, K) in 
        state := xs; 
	event e2(x).

process a | b